import { processTest, populateTransaction } from "../../test.fixture";

const contractName = "LibertiV2Proxy";

const testLabel = "withdrawWithSymbolCheck"; // <= Name of the test
const testDirSuffix = "withdraw_with_symbol_check"; // <= directory to compare device snapshots to
const testNetwork = "polygon";
const signedPlugin = false;

const contractAddr = "0x654d0cc27b31810d38fd0f02f4e4bb8055a8a567";
const chainID = 137;

// From : https://polygonscan.com/tx/0x3d2fca1710866111de3f0c6e314e33f6c44308fec412e6f8d99bf1f8ec83ebac
const inputData =
  "0xa29226220000000000000000000000000000000000000000000000010ad835c26cc089e800000000000000000000000028424507fefb6f7f8e9d3860f56504e4e5f5f39000000000000000000000000063674aa00a4c24ea99b10499fc858e39ffa4fda4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000086c69414d57455448000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e812aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f00000000000000000000000028424507fefb6f7f8e9d3860f56504e4e5f5f390000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000000006268165df425bb3e466d74264a277a9e95100000000000000000000000000000000000000000000000000000000001d5714000000000000000000000000000000000000000000000000000450975783a0610000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000015b00000000000000000000000000000000000000000000000000013d00001a0020d6bdbf78c2132d05d31c914a87c6611c10748aeb04b58e8f00a007e5c0d20000000000000000000000000000000000000000000000000000ff00004f02a00000000000000000000000000000000000000000000000000000000000000001ee63c1e500bb98b3d2b18aef63a3178023a920971cf5f29be4c2132d05d31c914a87c6611c10748aeb04b58e8f51208dff5e27ea6b7ac08ebfdf9eb090f32ee9a30fcf7ceb23fd6bc0add59e62ac25578270cff1b9f6190024e8eda9df0000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111254eeb25477b68fb85ed929f73a960582000000000000000000000000000000000000000000000000000000000000044d0000000000458441b3000000000000000000000000000000000000000000000000";

const serializedTx = populateTransaction(contractAddr, inputData, chainID);

const devices = [
  {
    name: "nanos",
    label: "Nano S",
    steps: 8, // <= Define the number of steps for this test case and this device
  },
  {
    name: "nanox",
    label: "Nano X",
    steps: 6, // <= Define the number of steps for this test case and this device
  },
  {
    name: "nanosp",
    label: "Nano S+",
    steps: 6, // <= Define the number of steps for this test case and this device
  },
];

devices.forEach((device) => {
  processTest(
    device,
    contractName,
    testLabel,
    testDirSuffix,
    "",
    signedPlugin,
    serializedTx,
    testNetwork
  );
});
